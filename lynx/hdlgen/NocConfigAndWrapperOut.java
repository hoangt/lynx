package lynx.hdlgen;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Logger;

import lynx.data.Noc;
import lynx.main.ReportData;

/**
 * Output the noc_config file that goes into rtl2booksim
 * 
 * @author Mohamed
 *
 */
public class NocConfigAndWrapperOut {

    private static final Logger log = Logger.getLogger(NocConfigAndWrapperOut.class.getName());

    public static void writeNocConfigAndWrapper(Noc noc) throws FileNotFoundException, UnsupportedEncodingException {
        writeNocWrapper(noc);
        writeNocConfig(noc);
    }

    private static void writeNocWrapper(Noc noc) throws FileNotFoundException {
        PrintWriter writer = ReportData.getInstance().getNocWrapperFile();

        log.info("Generating noc_wrapper.sv file");

        int widthNoc = noc.getWidth();
        int widthRtl = noc.getInterfaceWidth();
        int n = noc.getNumRouters();
        int numVc = noc.getNumVcs();
        int depthPerVc = noc.getVcDepth();

        writer.println("// auto-generated by noclynx");
        writer.println();
        writer.println("// wrapper around fabric_interface to simplify HDLGEN in lynx");
        writer.println("module noc_wrapper");
        writer.println("#(");
        writer.println("    parameter WIDTH_NOC    = " + widthNoc + ",");
        writer.println("    parameter WIDTH_RTL    = " + widthRtl + ",");
        writer.println("    parameter N            = " + n + ",");
        writer.println("    parameter NUM_VC       = " + numVc + ",");
        writer.println("    parameter DEPTH_PER_VC = " + depthPerVc + ",");
        writer.println("    parameter VERBOSE      = 1");
        writer.println(")");
        writer.println("(");
        writer.println("    //clocks and reset");
        writer.println("    input         clk_noc,");
        writer.println("    input         rst,");
        writer.println("    input [N-1:0] clk_rtl,");
        writer.println("    input [N-1:0] clk_int,");
        writer.println();
        writer.println("    //from rtl modules to noc");
        for (int i = 0; i < n; i++)
            writer.println("    input [WIDTH_RTL-1:0] r" + i + "_data_in,");
        writer.println();
        for (int i = 0; i < n; i++)
            writer.println("    input r" + i + "_valid_in,");
        writer.println();
        for (int i = 0; i < n; i++)
            writer.println("    output r" + i + "_ready_out,");
        writer.println();
        writer.println("    //from noc to rtl modules");
        for (int i = 0; i < n; i++)
            writer.println("    output [WIDTH_RTL-1:0] r" + i + "_data_out,");
        writer.println();
        for (int i = 0; i < n; i++)
            writer.println("    output r" + i + "_valid_out,");
        writer.println();
        for (int i = 0; i < n; i++)
            if (i == n - 1)
                writer.println("    input r" + i + "_ready_in");
            else
                writer.println("    input r" + i + "_ready_in,");
        writer.println(");");
        writer.println();
        writer.println("//from rtl modules to noc");
        writer.println("wire [WIDTH_RTL-1:0] fi_i_packets_in [0:N-1];");
        writer.println("wire                 fi_i_valids_in  [0:N-1];");
        writer.println("wire                 fi_i_readys_out [0:N-1];");
        writer.println();
        writer.println("//from noc to rtl modules");
        writer.println("wire [WIDTH_RTL-1:0] fi_o_packets_out [0:N-1];");
        writer.println("wire                 fi_o_valids_out  [0:N-1];");
        writer.println("wire                 fi_o_readys_in   [0:N-1];");
        writer.println();
        writer.println("//instantiate fabric interface");
        writer.println("fabric_interface");
        writer.println("#(");
        writer.println("    .WIDTH_NOC(WIDTH_NOC),");
        writer.println("    .WIDTH_RTL(WIDTH_RTL),");
        writer.println("    .N(N),");
        writer.println("    .NUM_VC(NUM_VC),");
        writer.println("    .DEPTH_PER_VC(DEPTH_PER_VC),");
        writer.println("    .VERBOSE(VERBOSE)");
        writer.println(")");
        writer.println("fi_inst");
        writer.println("(");
        writer.println("    .clk_noc (clk_noc),");
        writer.println("    .rst     (rst),");
        writer.println("    .clk_rtl (clk_rtl),");
        writer.println("    .clk_int (clk_int),");
        writer.println();
        writer.println("    .i_packets_in  (fi_i_packets_in),");
        writer.println("    .i_valids_in   (fi_i_valids_in),");
        writer.println("    .i_readys_out  (fi_i_readys_out),");
        writer.println();
        writer.println("    .o_packets_out (fi_o_packets_out),");
        writer.println("    .o_valids_out  (fi_o_valids_out),");
        writer.println("    .o_readys_in   (fi_o_readys_in)");
        writer.println(");");
        writer.println();
        writer.println("//connect all the wires");
        for (int i = 0; i < n; i++)
            writer.println("assign fi_i_packets_in[" + i + "] = r" + i + "_data_in;");
        writer.println();
        for (int i = 0; i < n; i++)
            writer.println("assign fi_i_valids_in[" + i + "] = r" + i + "_valid_in;");
        writer.println();
        for (int i = 0; i < n; i++)
            writer.println("assign r" + i + "_ready_out = fi_i_readys_out[" + i + "];");
        writer.println();
        for (int i = 0; i < n; i++)
            writer.println("assign r" + i + "_data_out = fi_o_packets_out[" + i + "];");
        writer.println();
        for (int i = 0; i < n; i++)
            writer.println("assign r" + i + "_valid_out = fi_o_valids_out[" + i + "];");
        writer.println();
        for (int i = 0; i < n; i++)
            writer.println("assign fi_o_readys_in[" + i + "] = r" + i + "_ready_in;");
        writer.println();
        writer.println("endmodule");

        ReportData.getInstance().closeNocWrapperFile();
    }

    private static void writeNocConfig(Noc noc) throws FileNotFoundException, UnsupportedEncodingException {

        PrintWriter writer = ReportData.getInstance().getNocConfigFile();

        log.info("Generating noc_config file");

        int k = (int) Math.sqrt(noc.getNumRouters());

        writer.println("topology = mesh;");
        writer.println("k = " + k + ";");
        writer.println("n = 2;");
        writer.println();
        writer.println("flit_width = " + noc.getWidth() + ";");
        writer.println();
        writer.println("routing_function = dim_order;");
        writer.println();
        writer.println("// Flow control");
        writer.println("num_vcs     = 2;");
        writer.println("vc_buf_size = 16;");
        writer.println("wait_for_tail_credit = 0;");
        writer.println();
        writer.println("read_request_begin_vc = 0;");
        writer.println("read_request_end_vc = 0;");
        writer.println();
        writer.println("read_reply_begin_vc = 1;");
        writer.println("read_reply_end_vc = 1;");
        writer.println();
        writer.println("write_request_begin_vc = 2;");
        writer.println("write_request_end_vc = 2;");
        writer.println();
        writer.println("write_reply_begin_vc = 3;");
        writer.println("write_reply_end_vc = 3;");
        writer.println();
        writer.println("// Router architecture");
        writer.println("routing_delay  = 0;");
        writer.println("speculative = 1;");
        writer.println();
        writer.println("latency_thres = 10000.0;");
        writer.println();
        writer.println("// Simulation");
        writer.println("sim_type = fes2;");

        ReportData.getInstance().closeNocConfigFile();
    }

}
